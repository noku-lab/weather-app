{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["API","App","useState","query","setQuery","weather","setWeather","className","window","main","temp","type","placeholder","onChange","e","target","value","onKeyPress","event","key","fetch","then","res","json","response","console","log","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Math","round","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"0KAIMA,EACC,mCADDA,EAEE,2CA8DOC,MA/Cf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEiBF,mBAAS,IAF1B,mBAENG,EAFM,KAEGC,EAFH,KAeb,OACE,yBAAKC,UAAmC,oBAAfC,OAAOC,KAAyBJ,EAAQI,KAAKC,KAAO,GAAK,MAAO,aAAe,OACtG,8BACE,yBAAKH,UAAY,eACf,2BACAI,KAAO,OACPJ,UAAY,SACZK,YAAc,oBACdC,SAAY,SAAAC,GAAC,OAAGV,EAASU,EAAEC,OAAOC,QAClCA,MAASb,EACTc,WArBM,SAACC,GACI,UAAdA,EAAMC,KACTC,MAAM,GAAD,OAAIpB,EAAJ,qBAAyBG,EAAzB,+BAAqDH,IACzDqB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJlB,EAAWkB,GACXpB,EAAS,IACTqB,QAAQC,IAAIF,UAkBc,oBAAhBnB,EAAQI,KACd,6BACF,yBAAKF,UAAY,gBACjB,yBAAKA,UAAY,YAAYF,EAAQsB,KAArC,KAA6CtB,EAAQuB,IAAIC,QAAzD,KACE,yBAAKtB,UAAY,QA9CN,SAACuB,GACnB,IAIKC,EAFO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAE/DD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EANQ,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,SACrE,YAAa,UAAW,WAAY,WAKjBL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GAoCHE,CAAY,IAAIC,QAE3C,yBAAKjC,UAAY,eACf,yBAAKA,UAAY,QACdkC,KAAKC,MAAMrC,EAAQI,KAAKC,MAD3B,SAGF,yBAAKH,UAAY,WAAWF,EAAQA,QAAQ,GAAGI,QAErC,MClDEkC,QACW,cAA7BnC,OAAOoC,SAASC,UAEe,UAA7BrC,OAAOoC,SAASC,UAEhBrC,OAAOoC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,a","file":"static/js/main.6a86fc77.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\n\n\nconst API = {\n  key: 'c5f6f499dd5e849e0835d5e0dbb0e5a9',\n  base: 'https://api.openweathermap.org/data/2.5/'\n}\n const dateBuilder = (d) =>{\n   let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"August\",\n    \"September\", \"October\", \"November\", \"Decmber\"];\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    return `${day} ${date} ${month} ${year}`\n }\n\nfunction App() {\n  const [query, setQuery] = useState('');\n  const [weather, setWeather] = useState({});\n\n  const search =(event) =>{\n    if(event.key === \"Enter\")\n    fetch(`${API.base}weather?q=${query}&units=metric&APPID=${API.key}`)\n    .then(res => res.json()) \n    .then(response => {\n      setWeather(response)\n      setQuery('');\n      console.log(response)\n    });\n  }\n\n  return (\n    <div className= {(typeof window.main != \"undefined\") ? ((weather.main.temp > 18)? 'app': 'app winter'): 'app'}>\n      <main>\n        <div className = \"search-form\">\n          <input\n          type = \"type\"\n          className = \"search\"\n          placeholder = \"Enter a city name\"\n          onChange = {e =>setQuery(e.target.value)}\n          value = {query}\n          onKeyPress = {search}\n          />\n        </div>\n\n        {typeof weather.main != \"undefined\"?(\n          <div>\n        <div className = \"location-box\">\n        <div className = \"location\">{weather.name}, {weather.sys.country} </div>\n          <div className = \"date\">{dateBuilder(new Date())}</div>\n        </div>\n        <div className = \"weather-box\">\n          <div className = \"temp\">\n            {Math.round(weather.main.temp)}Â°C\n          </div>\n        <div className = \"weather\">{weather.weather[0].main}</div>\n        </div>\n        </div>): ('') }\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}